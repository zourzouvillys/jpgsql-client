buildscript {
  repositories {
    mavenCentral()
  }
  configurations.classpath {
    // resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id 'net.ltgt.apt-eclipse' version '0.21'
  id 'eclipse'
  id 'maven-publish'
}

version = project.hasProperty('versionId') ? project.property('versionId') : 'master'
group = 'io.zrz.jpgsql'

apply plugin: 'java-library'
apply plugin: 'net.ltgt.apt'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'

repositories {
  mavenCentral()
  jcenter()
}


wrapper {
  gradleVersion = '6.7'
  doLast {
    delete "${projectDir}/gradlew.bat"
  }
}

dependencyLocking {
//    lockMode = LockMode.STRICT
//    lockAllConfigurations()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {

  implementation enforcedPlatform('io.netty:netty-bom:4.1.54.Final')
  implementation 'io.netty:netty-buffer'
  implementation 'io.netty:netty-codec'
  implementation 'io.netty:netty-handler'
  implementation 'io.netty:netty-transport'

  // 
  annotationProcessor 'org.immutables:value:2.8.8'
  compileOnly 'org.immutables:value-annotations:2.8.8'

  compileOnly group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.2.600'

  //
  api 'org.reactivestreams:reactive-streams:1.0.3'
  api 'org.slf4j:slf4j-api:1.7.30'

  implementation 'org.postgresql:postgresql:42.2.18'
  implementation 'com.google.guava:guava:30.0-jre'
  
  api 'io.reactivex.rxjava3:rxjava:3.1.2'
  
  implementation 'net.jodah:failsafe:2.4.0'
  
}

dependencies {
  testImplementation 'ch.qos.logback:logback-classic:1.2.3'
  testImplementation 'org.slf4j:jul-to-slf4j:1.7.30'
  testImplementation 'junit:junit:4.12'

}


task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}


publishing {
  publications {
    maven(MavenPublication) {
    	from components.java
      	groupId 'io.zrz.jpgsql'
      	artifactId 'jpgsql-client'
      	version project.version
    }
  }
}




task configureBuildship {
}

eclipse.synchronizationTasks project.rootProject.configureBuildship

project.afterEvaluate {
  if (project.tasks.findByName('cleanEclipseFactorypath')) {
    project.rootProject.tasks['configureBuildship'].dependsOn(
	    project.tasks['cleanEclipseFactorypath'],
	    project.tasks['cleanEclipseClasspath'],
	    project.tasks['cleanEclipseJdtApt'],
	    project.tasks['cleanEclipseJdt'],	    
	    project.tasks['eclipseFactorypath'],
	    project.tasks['eclipseJdt'],
	    project.tasks['eclipseJdtApt']
	  )  
  }  
  else if (project.tasks.findByName('eclipseFactorypath')) {
	project.rootProject.tasks['configureBuildship'].dependsOn(
	    project.tasks['eclipseFactorypath'],
	    project.tasks['eclipseJdt'],
	    project.tasks['eclipseJdtApt']	    
	)
  }
  project.eclipse {
    project.name = createProjectDisplayName()
    project.natures << 'org.eclipse.buildship.core.gradleprojectnature'
  }
}

def createProjectDisplayName() {
  if (project == project.rootProject) {
    return project.name  
  }
  return "${project.rootProject.name}${project.path}"
}


// ----

publishing {
  publications {
      mavenJava(MavenPublication) {
          groupId = 'io.zrz.jpgsql'
          artifactId = 'jpgsql-client'
          version = project.version
          from components.java
      }
  }
  
  
    repositories {
   maven {
      url 'https://theo-test-460206009704.d.codeartifact.us-west-2.amazonaws.com/maven/theo-test/'
      credentials {
        username "aws"
        password "/usr/local/bin/fcli sudo --account 460206009704 --role AWSAdministratorAccess aws codeartifact get-authorization-token --domain theo-test --domain-owner 460206009704 --query authorizationToken --output text".execute().text
      }
    }
    }  
  
}
