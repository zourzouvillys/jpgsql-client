// Generated by delombok at Tue Sep 22 10:54:18 PDT 2020
package io.zrz.jpgsql.client;

import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;

public abstract class AbstractPostgresClient implements PostgresClient {
  private final Cache<String, Query> cache = CacheBuilder.newBuilder().maximumSize(1000).expireAfterWrite(5, TimeUnit.MINUTES).build();
  private final Cache<List<Query>, CombinedQuery> combineCache = CacheBuilder.newBuilder().maximumSize(1000).expireAfterWrite(5, TimeUnit.MINUTES).build();

  @Override
  public Query createQuery(String sql, int paramcount) {
    try {
      return this.cache.get(sql, () -> new SimpleQuery(sql, paramcount));
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public Query createQuery(List<Query> combine) {
    try {
      return this.combineCache.get(combine, () -> new CombinedQuery(combine.stream().flatMap(q -> q.getSubqueries().stream()).collect(Collectors.toList())));
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }
}
