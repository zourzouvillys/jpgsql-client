// Generated by delombok at Tue Sep 22 10:54:18 PDT 2020
package io.zrz.jpgsql.client.opj;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.TimeUnit;

import org.postgresql.jdbc.PgConnection;
import org.postgresql.util.PSQLException;

import net.jodah.failsafe.Failsafe;
import net.jodah.failsafe.RetryPolicy;

/**
 * Thread that interacts with the {@link PgConnection}.
 */
public class PgConnectionThread extends Thread {
  @java.lang.SuppressWarnings("all")
  private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(PgConnectionThread.class);
  private final PgThreadPooledClient pool;
  private PgLocalConnection conn;
  private final Runnable run;

  public PgConnectionThread(final PgThreadPooledClient pool, final Runnable run) {
    super();
    log.debug("started thread");
    this.setDaemon(true);
    this.run = run;
    this.pool = pool;
  }

  @Override
  public void run() {
    try {
      try {
        log.debug("connecting");
        try (ResultSet res = connection().getConnection().execSQLQuery("SELECT 1")) {
          log.debug("established connection");
        }
        // the loop
        this.run.run();
        log.debug("thread finished");
      } catch (final Throwable t) {
        log.info("connection thread error", t);
        throw t;
      } finally {
        close();
      }
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  // TODO: make configurable at runtime
  private static RetryPolicy RETRY_POLICY = new RetryPolicy().retryOn(PSQLException.class).withDelay(250, TimeUnit.MILLISECONDS).withBackoff(1, 5, TimeUnit.SECONDS).withJitter(0.25).withMaxDuration(30, TimeUnit.SECONDS);

  public static PgLocalConnection connection() throws SQLException {
    final PgConnectionThread thd = (PgConnectionThread) Thread.currentThread();
    if (thd.conn == null) {
      log.debug("Creating new connection thread");
      // this may throw.
      PgConnection raw = Failsafe.with(RETRY_POLICY).onFailedAttempt(e -> log.warn("connection failed, retying {}", e.getMessage())).get(() -> thd.pool.createConnection());
      thd.conn = new PgLocalConnection(thd.pool, raw);
      if (thd.pool.getListener() != null) {
        thd.pool.getListener().connectionCreated(thd.conn);
      }
    }
    return thd.conn;
  }

  public static void close() {
    log.debug("connection thread closing");
    final PgConnectionThread thd = (PgConnectionThread) Thread.currentThread();
    if (thd.conn != null) {
      if (thd.pool.getListener() != null) {
        thd.pool.getListener().connectionClosed(thd.conn);
      }
      thd.conn.close();
      thd.conn = null;
    }
  }
}
