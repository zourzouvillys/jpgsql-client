// Generated by delombok at Tue Sep 22 10:54:18 PDT 2020
package io.zrz.jpgsql.client;

import java.time.Duration;
import lombok.Builder.Default;

public final class PostgresConnectionProperties {

  public static enum SslMode {
    Disable, Require, VerifyCA, VerifyFull;
  }

  /**
   * The hostname. Localhost by default.
   */
  private final String hostname;
  /**
   * The port to connect to. 5432 by default.
   */
  private final int port;
  /**
   * The database name to connect to.
   */
  private final String dbname;
  /**
   * The username to use for connecting.
   */
  private final String username;
  /**
   * The password to use for connecting.
   */
  private final String password;
  /**
   * The minimum number of idle connections.
   */
  private final int minIdle;
  /**
   * how long a connection is idle before it is closed and removed from the pool.
   */
  private final Duration idleTimeout;
  /**
   * how long a connection tries to establish before timing out.
   */
  private final Duration connectTimeout;
  /**
   * maximum number of connections.
   *
   * be aware that if the {@link org.postgresql} version of the PostgresClient is used and configured to use a thread
   * for async emulation, then this will be equal to the number of threads created (urgh).
   */
  private final int maxPoolSize;
  /**
   * how long a pending query can wait for a connection to be available when it seems like progress has been stalled.
   * 
   * this happens when no connections are available, and we're trying to connect.
   * 
   * if set to zero, enqueing will be rejected and all enqueued queries will be rejected when there is no connection
   * available, with the exception of the first startup - which uses the connectTimeout instead.
   */
  private final Duration maxStalledWait;
  /**
   * The number of queries that can be queued for execution.
   *
   * If set to zero, this will not allow more than the {@link #getMaxPoolSize()} number of pending/executing queries.
   */
  private final int queueDepth;
  /**
   * if this connection is read only?
   */
  private final boolean readOnly;
  private final boolean ssl;
  private final String sslMode;
  private final Duration socketTimeout;
  private final String applicationName;
  // 0 == no batching
  private final int defaultRowFetchSize;
  private final int sendBufferSize;
  private final int recvBufferSize;
  private final boolean debug;

  @java.lang.SuppressWarnings("all")
  private static int $default$minIdle() {
    return 0;
  }

  @java.lang.SuppressWarnings("all")
  private static Duration $default$idleTimeout() {
    return Duration.ofSeconds(60);
  }

  @java.lang.SuppressWarnings("all")
  private static Duration $default$connectTimeout() {
    return Duration.ofSeconds(10);
  }

  @java.lang.SuppressWarnings("all")
  private static int $default$maxPoolSize() {
    return 10;
  }

  @java.lang.SuppressWarnings("all")
  private static Duration $default$maxStalledWait() {
    return Duration.ofSeconds(2);
  }

  @java.lang.SuppressWarnings("all")
  private static boolean $default$readOnly() {
    return false;
  }

  @java.lang.SuppressWarnings("all")
  private static boolean $default$ssl() {
    return false;
  }

  @java.lang.SuppressWarnings("all")
  private static String $default$sslMode() {
    return null;
  }

  @java.lang.SuppressWarnings("all")
  private static Duration $default$socketTimeout() {
    return null;
  }

  @java.lang.SuppressWarnings("all")
  private static String $default$applicationName() {
    return "jpgsql";
  }

  @java.lang.SuppressWarnings("all")
  private static int $default$defaultRowFetchSize() {
    return 0;
  }

  @java.lang.SuppressWarnings("all")
  private static int $default$sendBufferSize() {
    return 1024 * 64;
  }

  @java.lang.SuppressWarnings("all")
  private static int $default$recvBufferSize() {
    return 1024 * 64;
  }

  @java.lang.SuppressWarnings("all")
  private static boolean $default$debug() {
    return false;
  }

  @java.lang.SuppressWarnings("all")
  PostgresConnectionProperties(final String hostname, final int port, final String dbname, final String username, final String password, final int minIdle, final Duration idleTimeout, final Duration connectTimeout, final int maxPoolSize, final Duration maxStalledWait, final int queueDepth, final boolean readOnly, final boolean ssl, final String sslMode, final Duration socketTimeout, final String applicationName, final int defaultRowFetchSize, final int sendBufferSize, final int recvBufferSize, final boolean debug) {
    this.hostname = hostname;
    this.port = port;
    this.dbname = dbname;
    this.username = username;
    this.password = password;
    this.minIdle = minIdle;
    this.idleTimeout = idleTimeout;
    this.connectTimeout = connectTimeout;
    this.maxPoolSize = maxPoolSize;
    this.maxStalledWait = maxStalledWait;
    this.queueDepth = queueDepth;
    this.readOnly = readOnly;
    this.ssl = ssl;
    this.sslMode = sslMode;
    this.socketTimeout = socketTimeout;
    this.applicationName = applicationName;
    this.defaultRowFetchSize = defaultRowFetchSize;
    this.sendBufferSize = sendBufferSize;
    this.recvBufferSize = recvBufferSize;
    this.debug = debug;
  }


  @java.lang.SuppressWarnings("all")
  public static class PostgresConnectionPropertiesBuilder {
    @java.lang.SuppressWarnings("all")
    private String hostname;
    @java.lang.SuppressWarnings("all")
    private int port;
    @java.lang.SuppressWarnings("all")
    private String dbname;
    @java.lang.SuppressWarnings("all")
    private String username;
    @java.lang.SuppressWarnings("all")
    private String password;
    @java.lang.SuppressWarnings("all")
    private boolean minIdle$set;
    @java.lang.SuppressWarnings("all")
    private int minIdle$value;
    @java.lang.SuppressWarnings("all")
    private boolean idleTimeout$set;
    @java.lang.SuppressWarnings("all")
    private Duration idleTimeout$value;
    @java.lang.SuppressWarnings("all")
    private boolean connectTimeout$set;
    @java.lang.SuppressWarnings("all")
    private Duration connectTimeout$value;
    @java.lang.SuppressWarnings("all")
    private boolean maxPoolSize$set;
    @java.lang.SuppressWarnings("all")
    private int maxPoolSize$value;
    @java.lang.SuppressWarnings("all")
    private boolean maxStalledWait$set;
    @java.lang.SuppressWarnings("all")
    private Duration maxStalledWait$value;
    @java.lang.SuppressWarnings("all")
    private int queueDepth;
    @java.lang.SuppressWarnings("all")
    private boolean readOnly$set;
    @java.lang.SuppressWarnings("all")
    private boolean readOnly$value;
    @java.lang.SuppressWarnings("all")
    private boolean ssl$set;
    @java.lang.SuppressWarnings("all")
    private boolean ssl$value;
    @java.lang.SuppressWarnings("all")
    private boolean sslMode$set;
    @java.lang.SuppressWarnings("all")
    private String sslMode$value;
    @java.lang.SuppressWarnings("all")
    private boolean socketTimeout$set;
    @java.lang.SuppressWarnings("all")
    private Duration socketTimeout$value;
    @java.lang.SuppressWarnings("all")
    private boolean applicationName$set;
    @java.lang.SuppressWarnings("all")
    private String applicationName$value;
    @java.lang.SuppressWarnings("all")
    private boolean defaultRowFetchSize$set;
    @java.lang.SuppressWarnings("all")
    private int defaultRowFetchSize$value;
    @java.lang.SuppressWarnings("all")
    private boolean sendBufferSize$set;
    @java.lang.SuppressWarnings("all")
    private int sendBufferSize$value;
    @java.lang.SuppressWarnings("all")
    private boolean recvBufferSize$set;
    @java.lang.SuppressWarnings("all")
    private int recvBufferSize$value;
    @java.lang.SuppressWarnings("all")
    private boolean debug$set;
    @java.lang.SuppressWarnings("all")
    private boolean debug$value;

    @java.lang.SuppressWarnings("all")
    PostgresConnectionPropertiesBuilder() {
    }

    /**
     * The hostname. Localhost by default.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder hostname(final String hostname) {
      this.hostname = hostname;
      return this;
    }

    /**
     * The port to connect to. 5432 by default.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder port(final int port) {
      this.port = port;
      return this;
    }

    /**
     * The database name to connect to.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder dbname(final String dbname) {
      this.dbname = dbname;
      return this;
    }

    /**
     * The username to use for connecting.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder username(final String username) {
      this.username = username;
      return this;
    }

    /**
     * The password to use for connecting.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder password(final String password) {
      this.password = password;
      return this;
    }

    /**
     * The minimum number of idle connections.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder minIdle(final int minIdle) {
      this.minIdle$value = minIdle;
      minIdle$set = true;
      return this;
    }

    /**
     * how long a connection is idle before it is closed and removed from the pool.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder idleTimeout(final Duration idleTimeout) {
      this.idleTimeout$value = idleTimeout;
      idleTimeout$set = true;
      return this;
    }

    /**
     * how long a connection tries to establish before timing out.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder connectTimeout(final Duration connectTimeout) {
      this.connectTimeout$value = connectTimeout;
      connectTimeout$set = true;
      return this;
    }

    /**
     * maximum number of connections.
     *
     * be aware that if the {@link org.postgresql} version of the PostgresClient is used and configured to use a thread
     * for async emulation, then this will be equal to the number of threads created (urgh).
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder maxPoolSize(final int maxPoolSize) {
      this.maxPoolSize$value = maxPoolSize;
      maxPoolSize$set = true;
      return this;
    }

    /**
     * how long a pending query can wait for a connection to be available when it seems like progress has been stalled.
     * 
     * this happens when no connections are available, and we're trying to connect.
     * 
     * if set to zero, enqueing will be rejected and all enqueued queries will be rejected when there is no connection
     * available, with the exception of the first startup - which uses the connectTimeout instead.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder maxStalledWait(final Duration maxStalledWait) {
      this.maxStalledWait$value = maxStalledWait;
      maxStalledWait$set = true;
      return this;
    }

    /**
     * The number of queries that can be queued for execution.
     *
     * If set to zero, this will not allow more than the {@link #getMaxPoolSize()} number of pending/executing queries.
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder queueDepth(final int queueDepth) {
      this.queueDepth = queueDepth;
      return this;
    }

    /**
     * if this connection is read only?
     * @return {@code this}.
     */
    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder readOnly(final boolean readOnly) {
      this.readOnly$value = readOnly;
      readOnly$set = true;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder ssl(final boolean ssl) {
      this.ssl$value = ssl;
      ssl$set = true;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder sslMode(final String sslMode) {
      this.sslMode$value = sslMode;
      sslMode$set = true;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder socketTimeout(final Duration socketTimeout) {
      this.socketTimeout$value = socketTimeout;
      socketTimeout$set = true;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder applicationName(final String applicationName) {
      this.applicationName$value = applicationName;
      applicationName$set = true;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder defaultRowFetchSize(final int defaultRowFetchSize) {
      this.defaultRowFetchSize$value = defaultRowFetchSize;
      defaultRowFetchSize$set = true;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder sendBufferSize(final int sendBufferSize) {
      this.sendBufferSize$value = sendBufferSize;
      sendBufferSize$set = true;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder recvBufferSize(final int recvBufferSize) {
      this.recvBufferSize$value = recvBufferSize;
      recvBufferSize$set = true;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder debug(final boolean debug) {
      this.debug$value = debug;
      debug$set = true;
      return this;
    }

    @java.lang.SuppressWarnings("all")
    public PostgresConnectionProperties build() {
      int minIdle$value = this.minIdle$value;
      if (!this.minIdle$set) minIdle$value = PostgresConnectionProperties.$default$minIdle();
      Duration idleTimeout$value = this.idleTimeout$value;
      if (!this.idleTimeout$set) idleTimeout$value = PostgresConnectionProperties.$default$idleTimeout();
      Duration connectTimeout$value = this.connectTimeout$value;
      if (!this.connectTimeout$set) connectTimeout$value = PostgresConnectionProperties.$default$connectTimeout();
      int maxPoolSize$value = this.maxPoolSize$value;
      if (!this.maxPoolSize$set) maxPoolSize$value = PostgresConnectionProperties.$default$maxPoolSize();
      Duration maxStalledWait$value = this.maxStalledWait$value;
      if (!this.maxStalledWait$set) maxStalledWait$value = PostgresConnectionProperties.$default$maxStalledWait();
      boolean readOnly$value = this.readOnly$value;
      if (!this.readOnly$set) readOnly$value = PostgresConnectionProperties.$default$readOnly();
      boolean ssl$value = this.ssl$value;
      if (!this.ssl$set) ssl$value = PostgresConnectionProperties.$default$ssl();
      String sslMode$value = this.sslMode$value;
      if (!this.sslMode$set) sslMode$value = PostgresConnectionProperties.$default$sslMode();
      Duration socketTimeout$value = this.socketTimeout$value;
      if (!this.socketTimeout$set) socketTimeout$value = PostgresConnectionProperties.$default$socketTimeout();
      String applicationName$value = this.applicationName$value;
      if (!this.applicationName$set) applicationName$value = PostgresConnectionProperties.$default$applicationName();
      int defaultRowFetchSize$value = this.defaultRowFetchSize$value;
      if (!this.defaultRowFetchSize$set) defaultRowFetchSize$value = PostgresConnectionProperties.$default$defaultRowFetchSize();
      int sendBufferSize$value = this.sendBufferSize$value;
      if (!this.sendBufferSize$set) sendBufferSize$value = PostgresConnectionProperties.$default$sendBufferSize();
      int recvBufferSize$value = this.recvBufferSize$value;
      if (!this.recvBufferSize$set) recvBufferSize$value = PostgresConnectionProperties.$default$recvBufferSize();
      boolean debug$value = this.debug$value;
      if (!this.debug$set) debug$value = PostgresConnectionProperties.$default$debug();
      return new PostgresConnectionProperties(this.hostname, this.port, this.dbname, this.username, this.password, minIdle$value, idleTimeout$value, connectTimeout$value, maxPoolSize$value, maxStalledWait$value, this.queueDepth, readOnly$value, ssl$value, sslMode$value, socketTimeout$value, applicationName$value, defaultRowFetchSize$value, sendBufferSize$value, recvBufferSize$value, debug$value);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
      return "PostgresConnectionProperties.PostgresConnectionPropertiesBuilder(hostname=" + this.hostname + ", port=" + this.port + ", dbname=" + this.dbname + ", username=" + this.username + ", password=" + this.password + ", minIdle$value=" + this.minIdle$value + ", idleTimeout$value=" + this.idleTimeout$value + ", connectTimeout$value=" + this.connectTimeout$value + ", maxPoolSize$value=" + this.maxPoolSize$value + ", maxStalledWait$value=" + this.maxStalledWait$value + ", queueDepth=" + this.queueDepth + ", readOnly$value=" + this.readOnly$value + ", ssl$value=" + this.ssl$value + ", sslMode$value=" + this.sslMode$value + ", socketTimeout$value=" + this.socketTimeout$value + ", applicationName$value=" + this.applicationName$value + ", defaultRowFetchSize$value=" + this.defaultRowFetchSize$value + ", sendBufferSize$value=" + this.sendBufferSize$value + ", recvBufferSize$value=" + this.recvBufferSize$value + ", debug$value=" + this.debug$value + ")";
    }
  }

  @java.lang.SuppressWarnings("all")
  public static PostgresConnectionProperties.PostgresConnectionPropertiesBuilder builder() {
    return new PostgresConnectionProperties.PostgresConnectionPropertiesBuilder();
  }

  @java.lang.SuppressWarnings("all")
  public PostgresConnectionProperties.PostgresConnectionPropertiesBuilder toBuilder() {
    return new PostgresConnectionProperties.PostgresConnectionPropertiesBuilder().hostname(this.hostname).port(this.port).dbname(this.dbname).username(this.username).password(this.password).minIdle(this.minIdle).idleTimeout(this.idleTimeout).connectTimeout(this.connectTimeout).maxPoolSize(this.maxPoolSize).maxStalledWait(this.maxStalledWait).queueDepth(this.queueDepth).readOnly(this.readOnly).ssl(this.ssl).sslMode(this.sslMode).socketTimeout(this.socketTimeout).applicationName(this.applicationName).defaultRowFetchSize(this.defaultRowFetchSize).sendBufferSize(this.sendBufferSize).recvBufferSize(this.recvBufferSize).debug(this.debug);
  }

  /**
   * The hostname. Localhost by default.
   */
  @java.lang.SuppressWarnings("all")
  public String getHostname() {
    return this.hostname;
  }

  /**
   * The port to connect to. 5432 by default.
   */
  @java.lang.SuppressWarnings("all")
  public int getPort() {
    return this.port;
  }

  /**
   * The database name to connect to.
   */
  @java.lang.SuppressWarnings("all")
  public String getDbname() {
    return this.dbname;
  }

  /**
   * The username to use for connecting.
   */
  @java.lang.SuppressWarnings("all")
  public String getUsername() {
    return this.username;
  }

  /**
   * The password to use for connecting.
   */
  @java.lang.SuppressWarnings("all")
  public String getPassword() {
    return this.password;
  }

  /**
   * The minimum number of idle connections.
   */
  @java.lang.SuppressWarnings("all")
  public int getMinIdle() {
    return this.minIdle;
  }

  /**
   * how long a connection is idle before it is closed and removed from the pool.
   */
  @java.lang.SuppressWarnings("all")
  public Duration getIdleTimeout() {
    return this.idleTimeout;
  }

  /**
   * how long a connection tries to establish before timing out.
   */
  @java.lang.SuppressWarnings("all")
  public Duration getConnectTimeout() {
    return this.connectTimeout;
  }

  /**
   * maximum number of connections.
   *
   * be aware that if the {@link org.postgresql} version of the PostgresClient is used and configured to use a thread
   * for async emulation, then this will be equal to the number of threads created (urgh).
   */
  @java.lang.SuppressWarnings("all")
  public int getMaxPoolSize() {
    return this.maxPoolSize;
  }

  /**
   * how long a pending query can wait for a connection to be available when it seems like progress has been stalled.
   * 
   * this happens when no connections are available, and we're trying to connect.
   * 
   * if set to zero, enqueing will be rejected and all enqueued queries will be rejected when there is no connection
   * available, with the exception of the first startup - which uses the connectTimeout instead.
   */
  @java.lang.SuppressWarnings("all")
  public Duration getMaxStalledWait() {
    return this.maxStalledWait;
  }

  /**
   * The number of queries that can be queued for execution.
   *
   * If set to zero, this will not allow more than the {@link #getMaxPoolSize()} number of pending/executing queries.
   */
  @java.lang.SuppressWarnings("all")
  public int getQueueDepth() {
    return this.queueDepth;
  }

  /**
   * if this connection is read only?
   */
  @java.lang.SuppressWarnings("all")
  public boolean isReadOnly() {
    return this.readOnly;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isSsl() {
    return this.ssl;
  }

  @java.lang.SuppressWarnings("all")
  public String getSslMode() {
    return this.sslMode;
  }

  @java.lang.SuppressWarnings("all")
  public Duration getSocketTimeout() {
    return this.socketTimeout;
  }

  @java.lang.SuppressWarnings("all")
  public String getApplicationName() {
    return this.applicationName;
  }

  @java.lang.SuppressWarnings("all")
  public int getDefaultRowFetchSize() {
    return this.defaultRowFetchSize;
  }

  @java.lang.SuppressWarnings("all")
  public int getSendBufferSize() {
    return this.sendBufferSize;
  }

  @java.lang.SuppressWarnings("all")
  public int getRecvBufferSize() {
    return this.recvBufferSize;
  }

  @java.lang.SuppressWarnings("all")
  public boolean isDebug() {
    return this.debug;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof PostgresConnectionProperties)) return false;
    final PostgresConnectionProperties other = (PostgresConnectionProperties) o;
    final java.lang.Object this$hostname = this.getHostname();
    final java.lang.Object other$hostname = other.getHostname();
    if (this$hostname == null ? other$hostname != null : !this$hostname.equals(other$hostname)) return false;
    if (this.getPort() != other.getPort()) return false;
    final java.lang.Object this$dbname = this.getDbname();
    final java.lang.Object other$dbname = other.getDbname();
    if (this$dbname == null ? other$dbname != null : !this$dbname.equals(other$dbname)) return false;
    final java.lang.Object this$username = this.getUsername();
    final java.lang.Object other$username = other.getUsername();
    if (this$username == null ? other$username != null : !this$username.equals(other$username)) return false;
    final java.lang.Object this$password = this.getPassword();
    final java.lang.Object other$password = other.getPassword();
    if (this$password == null ? other$password != null : !this$password.equals(other$password)) return false;
    if (this.getMinIdle() != other.getMinIdle()) return false;
    final java.lang.Object this$idleTimeout = this.getIdleTimeout();
    final java.lang.Object other$idleTimeout = other.getIdleTimeout();
    if (this$idleTimeout == null ? other$idleTimeout != null : !this$idleTimeout.equals(other$idleTimeout)) return false;
    final java.lang.Object this$connectTimeout = this.getConnectTimeout();
    final java.lang.Object other$connectTimeout = other.getConnectTimeout();
    if (this$connectTimeout == null ? other$connectTimeout != null : !this$connectTimeout.equals(other$connectTimeout)) return false;
    if (this.getMaxPoolSize() != other.getMaxPoolSize()) return false;
    final java.lang.Object this$maxStalledWait = this.getMaxStalledWait();
    final java.lang.Object other$maxStalledWait = other.getMaxStalledWait();
    if (this$maxStalledWait == null ? other$maxStalledWait != null : !this$maxStalledWait.equals(other$maxStalledWait)) return false;
    if (this.getQueueDepth() != other.getQueueDepth()) return false;
    if (this.isReadOnly() != other.isReadOnly()) return false;
    if (this.isSsl() != other.isSsl()) return false;
    final java.lang.Object this$sslMode = this.getSslMode();
    final java.lang.Object other$sslMode = other.getSslMode();
    if (this$sslMode == null ? other$sslMode != null : !this$sslMode.equals(other$sslMode)) return false;
    final java.lang.Object this$socketTimeout = this.getSocketTimeout();
    final java.lang.Object other$socketTimeout = other.getSocketTimeout();
    if (this$socketTimeout == null ? other$socketTimeout != null : !this$socketTimeout.equals(other$socketTimeout)) return false;
    final java.lang.Object this$applicationName = this.getApplicationName();
    final java.lang.Object other$applicationName = other.getApplicationName();
    if (this$applicationName == null ? other$applicationName != null : !this$applicationName.equals(other$applicationName)) return false;
    if (this.getDefaultRowFetchSize() != other.getDefaultRowFetchSize()) return false;
    if (this.getSendBufferSize() != other.getSendBufferSize()) return false;
    if (this.getRecvBufferSize() != other.getRecvBufferSize()) return false;
    if (this.isDebug() != other.isDebug()) return false;
    return true;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final java.lang.Object $hostname = this.getHostname();
    result = result * PRIME + ($hostname == null ? 43 : $hostname.hashCode());
    result = result * PRIME + this.getPort();
    final java.lang.Object $dbname = this.getDbname();
    result = result * PRIME + ($dbname == null ? 43 : $dbname.hashCode());
    final java.lang.Object $username = this.getUsername();
    result = result * PRIME + ($username == null ? 43 : $username.hashCode());
    final java.lang.Object $password = this.getPassword();
    result = result * PRIME + ($password == null ? 43 : $password.hashCode());
    result = result * PRIME + this.getMinIdle();
    final java.lang.Object $idleTimeout = this.getIdleTimeout();
    result = result * PRIME + ($idleTimeout == null ? 43 : $idleTimeout.hashCode());
    final java.lang.Object $connectTimeout = this.getConnectTimeout();
    result = result * PRIME + ($connectTimeout == null ? 43 : $connectTimeout.hashCode());
    result = result * PRIME + this.getMaxPoolSize();
    final java.lang.Object $maxStalledWait = this.getMaxStalledWait();
    result = result * PRIME + ($maxStalledWait == null ? 43 : $maxStalledWait.hashCode());
    result = result * PRIME + this.getQueueDepth();
    result = result * PRIME + (this.isReadOnly() ? 79 : 97);
    result = result * PRIME + (this.isSsl() ? 79 : 97);
    final java.lang.Object $sslMode = this.getSslMode();
    result = result * PRIME + ($sslMode == null ? 43 : $sslMode.hashCode());
    final java.lang.Object $socketTimeout = this.getSocketTimeout();
    result = result * PRIME + ($socketTimeout == null ? 43 : $socketTimeout.hashCode());
    final java.lang.Object $applicationName = this.getApplicationName();
    result = result * PRIME + ($applicationName == null ? 43 : $applicationName.hashCode());
    result = result * PRIME + this.getDefaultRowFetchSize();
    result = result * PRIME + this.getSendBufferSize();
    result = result * PRIME + this.getRecvBufferSize();
    result = result * PRIME + (this.isDebug() ? 79 : 97);
    return result;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  public java.lang.String toString() {
    return "PostgresConnectionProperties(hostname=" + this.getHostname() + ", port=" + this.getPort() + ", dbname=" + this.getDbname() + ", username=" + this.getUsername() + ", password=" + this.getPassword() + ", minIdle=" + this.getMinIdle() + ", idleTimeout=" + this.getIdleTimeout() + ", connectTimeout=" + this.getConnectTimeout() + ", maxPoolSize=" + this.getMaxPoolSize() + ", maxStalledWait=" + this.getMaxStalledWait() + ", queueDepth=" + this.getQueueDepth() + ", readOnly=" + this.isReadOnly() + ", ssl=" + this.isSsl() + ", sslMode=" + this.getSslMode() + ", socketTimeout=" + this.getSocketTimeout() + ", applicationName=" + this.getApplicationName() + ", defaultRowFetchSize=" + this.getDefaultRowFetchSize() + ", sendBufferSize=" + this.getSendBufferSize() + ", recvBufferSize=" + this.getRecvBufferSize() + ", debug=" + this.isDebug() + ")";
  }
}
