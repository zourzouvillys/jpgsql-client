// Generated by delombok at Tue Sep 22 10:54:18 PDT 2020
package io.zrz.jpgsql.binary;

import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.nio.charset.StandardCharsets;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;
import com.google.common.base.Splitter;

/**
 * converts a {@link UserUpdate} into it's raw table form.
 */
public class BinaryOutputStreamWriter implements BinaryStreamWriter {
  private DataOutput out;

  public BinaryOutputStreamWriter(DataOutput out) {
    this.out = out;
  }

  public BinaryOutputStreamWriter(OutputStream out) {
    this.out = new DataOutputStream(out);
  }

  @Override
  public BinaryRecordWriter writeNull() {
    try {
      out.writeInt(-1);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryRecordWriter writeInt(int value) {
    try {
      out.writeInt(4);
      out.writeInt(value);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryRecordWriter writeBigint(long value) {
    try {
      out.writeInt(8);
      out.writeLong(value);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryRecordWriter writeBoolean(boolean value) {
    try {
      out.writeInt(1);
      out.writeByte(value ? 1 : 0);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryRecordWriter writeJsonb(byte[] data) {
    try {
      out.writeInt(data.length + 1);
      out.writeByte(1);
      out.write(data);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryRecordWriter writeBytea(byte[] data) {
    try {
      // data = PGbytea.toBytes(data);
      out.writeInt(data.length);
      out.write(data);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryRecordWriter writeText(String data) {
    try {
      byte[] bytes = data.getBytes(StandardCharsets.UTF_8);
      out.writeInt(bytes.length);
      out.write(bytes);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryRecordWriter writeTextSearchVector(Collection<String> data) {
    try {
      List<byte[]> words = data.stream().filter(x -> x != null).flatMap(word -> Splitter.on(" ").splitToList(word).stream()).map(x -> x.trim()).filter(x -> x != null && !x.isEmpty()).map(x -> x.toLowerCase()).sorted().distinct().map(word -> word.getBytes(StandardCharsets.UTF_8)).collect(Collectors.toList());
      out.writeInt(4 + words.stream().mapToInt(lexeme -> lexeme.length + 3).sum());
      out.writeInt(words.size());
      words.forEach(lexeme -> {
        try {
          out.write(lexeme);
          out.writeByte(0);
          // position
          out.writeShort(0);
        } catch (Exception ex) {
          throw new RuntimeException(ex);
        }
      });
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryRecordWriter writeTimestampPgMicros(long value) {
    try {
      out.writeInt(8);
      out.writeLong(value);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryStreamWriter writeStartRecord(int numfields) {
    try {
      out.writeShort(numfields);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryRecordWriter writeSmallint(int value) {
    try {
      out.writeInt(2);
      out.writeShort(value);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryRecordWriter writeInet(InetAddress addr) {
    try {
      byte[] bytes = addr.getAddress();
      out.writeInt(bytes.length);
      out.write(bytes);
      return this;
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public BinaryStreamWriter writeEmptyArray(int oid) {
    throw new IllegalArgumentException();
  }

  @Override
  public BinaryStreamWriter writeTextArray(List<String> collect) {
    throw new IllegalArgumentException();
  }

  @Override
  public void writeRawField(int oid, byte[] data) {
    try {
      out.writeInt(data.length);
      out.write(data);
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }

  @Override
  public void writeOid(int oid) {
    try {
      out.writeInt(oid);
    } catch (final java.lang.Throwable $ex) {
      throw lombok.Lombok.sneakyThrow($ex);
    }
  }
}
